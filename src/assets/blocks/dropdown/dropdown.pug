mixin dropdown(options = {})
  -  
    const {
      name = "Имярек",
      title = "dropdown", 
      input = "Щелкни на плюсе или на минусе...",
      items = [
        {
          name: "item1",
          text: "item1 text",
          counter: 1,
        },
        {
          name: "item2",
          text: "item2 text",
          counter: 2,
        },
      ],

      counters = items.map((elem) => elem.counter),

      showButtons = true,
      showReset = true,
      expanded = false,
      buttonResetText = "Очистить",
      buttonApplyText = "Применить",
    } = options;

    items.map((elem, i) => elem.counter = counters[i]);

    let inputClass = "";
    let containerClass = "";

    if (expanded === true) {
      inputClass = "dropdown__input_expanded";
      containerClass = "dropdown__items-container_expanded";
    }

  .dropdown(data-name= name)
    if (title.length !== 0)
      .dropdown__title #{title}
    .dropdown__input(class= inputClass).js-dropdown__input
      span.dropdown__input-text.js-dropdown__input-text #{input}
      i.material-icons expand_more
    .dropdown__items-container(class= containerClass).js-dropdown__items-container
      each elem in items
        - const {text, counter} = elem;
        .dropdown__item.js-dropdown__item
          span.dropdown__item-name #{text}
          .dropdown__trigger
            .dropdown__minus.js-dropdown__minus -
            span.js-dropdown__counter  #{counter} 
            .dropdown__plus.js-dropdown__plus +
      if (showButtons)
        .dropdown__buttons
          .dropdown__button-reset.js-dropdown__button-reset(hidden= !showReset) #{buttonResetText}                   
          .dropdown__button-apply.js-dropdown__button-apply #{buttonApplyText}
